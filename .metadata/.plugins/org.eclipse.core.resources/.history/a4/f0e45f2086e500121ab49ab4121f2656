package psCategoryDuplications;


import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import java.io.File;

public class psCategoryDuplication 
{

	public static void main(String[] args)
	{
		try
		{
			File psPackage = new File("D:\\Tools\\Misc\\JARM Count Calculations\\JARM_Export.xml");
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(psPackage);
		 
			//optional, but recommended
			//read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
			doc.getDocumentElement().normalize();
		 
			System.out.println("Root element: " + doc.getDocumentElement().getNodeName());
			
			
			
			System.out.println("----------------------------");
		 
			NodeList nList = doc.getChildNodes();
			
			for (int index = 0; index < nList.getLength(); index++)
			{
				System.out.println("Node Name :" + nList.item(index));
				System.out.println("----------------------------");
			}
		 
			
		 
			 
		}
		catch (Exception ex)
		{
			ex.printStackTrace();
		}
	}
	
	public void getChildNodes(NodeList nodeList)
	{
		for(int i=0; i<nodeList.getLength(); i++){
		      Node childNode = nodeList.item(i);
		      if (childNode.getNodeName().equals("person")) {
		         //do something with it
		      }

		      NodeList children = childNode.getChildNodes();
		      if (children != null)
		      {
		         getChildNodes(children);
		      }
		    }
	}		
}


